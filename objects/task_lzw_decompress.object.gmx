<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>task_g</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Deinit
if(shrink_after)
    buffer_shrink(buff_out); 
    
ds_list_destroy(dictionary); 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Work
if(buffer_tell(buff_in) &gt;= buffer_get_size(buff_in)) {
    done = true;
    progress = 1; 
    exit; 
}

progress = buffer_tell(buff_in) / buffer_get_size(buff_in);

var value = buffer_read(buff_in, buffer_u16);

if(value &lt; 256) {
    // It's a simple value
    buffer_write(buff_out, buffer_u8, value);
    
    // Construct new word
    if(last_type == 1) {
        var new_word = ds_list_create(); 
        ds_list_add(new_word, last_word, value);
        
        ds_list_add(dictionary, new_word); 
        ds_list_mark_as_list(dictionary, ds_list_size(dictionary)-1); 
    }
    else if(last_type == 2) {
        var new_word = ds_list_create(); 
        ds_list_copy(new_word, last_word);
        ds_list_add(new_word, value); 
        
        ds_list_add(dictionary, new_word); 
        ds_list_mark_as_list(dictionary, ds_list_size(dictionary)-1); 
    }
       
    // Save last word
    last_word = value; 
    last_type = 1; // Single value
}
else {
    // New value is fetched from past dictionary
    // We gotta guess, because the decoder is always one entry behind 
    if(value-256 &gt;= ds_list_size(dictionary)) {
        // Create next word as last_word + last_word[0]
        var new_word = ds_list_create();
        if(last_type == 1)
            ds_list_add(new_word, last_word, last_word); 
        else if(last_type == 2) {
            ds_list_copy(new_word, last_word);
            ds_list_add(new_word, last_word[|0]); 
        }
        
        ds_list_add(dictionary, new_word); 
        ds_list_mark_as_list(dictionary, ds_list_size(dictionary)-1); 
        
        // Output new word
        for(var i = 0; i &lt; ds_list_size(new_word); i++) 
            buffer_write(buff_out, buffer_u8, new_word[|i]);
        
        last_word = new_word;
        last_type = 2; // Whole word
    }
    else {
        // Fetch from dictionary 
        var word = dictionary[|value - 256];
        
        // Output whole word
        for(var i = 0; i &lt; ds_list_size(word); i++) 
            buffer_write(buff_out, buffer_u8, word[|i]);
            
        // Construct new word
        if(last_type == 1) {
            var new_word = ds_list_create(); 
            ds_list_add(new_word, last_word);
            ds_list_add(new_word, word[|0]); 
            
            ds_list_add(dictionary, new_word); 
            ds_list_mark_as_list(dictionary, ds_list_size(dictionary)-1); 
        }
        else if(last_type == 2) {
            var new_word = ds_list_create(); 
            ds_list_copy(new_word, last_word);
            ds_list_add(new_word, word[|0]); 
            
            ds_list_add(dictionary, new_word); 
            ds_list_mark_as_list(dictionary, ds_list_size(dictionary)-1); 
        }
            
        // Save last word
        last_word = word; 
        last_type = 2; // Whole word 
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init
///buffer_decompress_lzw(src, dst)
buffer_seek(buff_in, buffer_seek_start, 0);

dictionary = ds_list_create(); 
last_word = 0;
last_type = 0; // Nothing 
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
