<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<room>
  <caption></caption>
  <width>1024</width>
  <height>768</height>
  <vsnap>32</vsnap>
  <hsnap>32</hsnap>
  <isometric>0</isometric>
  <speed>30</speed>
  <persistent>0</persistent>
  <colour>12632256</colour>
  <showcolour>-1</showcolour>
  <code>buff_in = buffer_create(1, buffer_grow, 1);
buffer_write(buff_in, buffer_text, "to+be+or+not+to+be+or");
buffer_shrink(buff_in);
buffer_seek(buff_in, buffer_seek_start, 0);

//=============================================================================================
// Compress
buff_out = buffer_create(2, buffer_grow, 2);

// TODO: store words in a priority queue sorted by length, so we can start with longest words 
// TODO: this is questionable tho 
dictionary = ds_list_create(); 
max_dict_size = 65536 - 256;

for(var i = 0; i &lt; buffer_get_size(buff_in); i += 0) {
    //rtdbg("Looking for matches starting at ", i);

    // Find longest match 
    var match_id = -1;
    var match_length = -1;
    
    for(var j = 0; j &lt; ds_list_size(dictionary); j++) {
        var matched = true; 
        var word = dictionary[|j];
        
        // Word longer than remaining input
        if(i + ds_list_size(word) &gt;= buffer_get_size(buff_in))
            continue;
            
        // Check for match
        buffer_seek(buff_in, buffer_seek_start, i); 
        
        var _dbg_bytes_read = "[[ ";
        for(var k = 0; k &lt; ds_list_size(word); k++) {
            var byte = buffer_read(buff_in, buffer_u8);
            _dbg_bytes_read += chr(byte) + " ";
            
            if(word[|k] != byte) {
                matched = false;
                break;
            }
        }
        
        //rtdbg("Match: ", matched, "#", _word_str(word), _dbg_bytes_read + "]] ");
        
        // Store if matched 
        if(matched &amp;&amp; ds_list_size(word) &gt; match_length) {
            match_id = j;
            match_length = ds_list_size(word); 
        }
    }
    
    if(match_id &gt;= 0) {
        // Output dict ref if matched
        buffer_write(buff_out, buffer_u16, match_id+256);
        
        //rtdbg("Best match is ", _word_str(dictionary[|match_id]));
        
        // Seek buffer, multiple bytes consumed
        i += match_length; 
        buffer_seek(buff_in, buffer_seek_start, i);
        
        // Add new word 
        // ( if we don't overrun the dictionary AND there's an additional byte to read )
        if(ds_list_size(dictionary) &lt; max_dict_size &amp;&amp; i+1 &lt; buffer_get_size(buff_in)) {
            var match_word = dictionary[|match_id];
            var new_word = ds_list_create();
            
            ds_list_copy(new_word, match_word); 
            ds_list_add(new_word, buffer_read(buff_in, buffer_u8));
            
            ds_list_add(dictionary, new_word); 
            ds_list_mark_as_list(dictionary, ds_list_size(dictionary)-1); 
            
            //rtdbg("Added new word: ", _word_str(new_word));
        }
    }
    else {
        // Otherwise output character as-is 
        // Seek buffer
        buffer_seek(buff_in, buffer_seek_start, i);
        
        var byte = buffer_read(buff_in, buffer_u8);
        buffer_write(buff_out, buffer_u16, byte);
        
        //rtdbg("No matches, outputting ", byte, " ", chr(byte));
        
        // Add new word 
        // ( if we don't overrun the dictionary AND there's an additional byte to read )
        if(ds_list_size(dictionary) &lt; max_dict_size &amp;&amp; i+1 &lt; buffer_get_size(buff_in)) {
            var new_word = ds_list_create();
            ds_list_add(new_word, byte, buffer_read(buff_in, buffer_u8)); 
            
            ds_list_add(dictionary, new_word);
            ds_list_mark_as_list(dictionary, ds_list_size(dictionary)-1); 
            
            //rtdbg("Added new word: ", _word_str(new_word));
        }
        
        // Single byte consumed
        i++;
    }
}

buffer_shrink(buff_out); 

// Debug output 
var text = "";

buffer_seek(buff_out, buffer_seek_start, 0); 
while(buffer_tell(buff_out) &lt; buffer_get_size(buff_out)) {
    var value = buffer_read(buff_out, buffer_u16);
    
    if(value &lt; 256 ) {
        // As-is character 
        text += chr(value) + " ";
    }
    else {
        // Word 
        text += "[[ ";
        
        var word = dictionary[|value-256];
        for(var i = 0; i &lt; ds_list_size(word); i++) 
            text += chr(word[|i]) + " ";
            
        text += "]] ";
    }
}

var dict_text = "Dictionary:#";
for(var i = 0; i &lt; ds_list_size(dictionary); i++) {
    dict_text += "    " + _word_str(dictionary[|i]) + "#";
} 

rtdbg("Input size: ", buffer_get_size(buff_in), "#",
      "Output size: ", buffer_get_size(buff_out), "#",
      "Dictionary size: ", ds_list_size(dictionary), "#",
      "Compressed output: #", text, "#",
      dict_text);
      
//=============================================================================================
// Decompress 
buffer_delete(buff_in);
buff_in = buff_out; 
buffer_seek(buff_in, buffer_seek_start, 0); 
buff_out = buffer_create(2, buffer_grow, 2);
      
ds_list_destroy(dictionary);
dictionary = ds_list_create(); 
last_word = 0;
last_type = 0; // Nothing 

while(buffer_tell(buff_in) &lt; buffer_get_size(buff_in)) {
    var value = buffer_read(buff_in, buffer_u16);
    
    if(value &lt; 256) {
        // It's a simple value
        buffer_write(buff_out, buffer_u8, value);
        
        //rtdbg("Read as-is value: ", chr(value), " ", value);
        
        // Construct new word
        if(last_type == 1) {
            var new_word = ds_list_create(); 
            ds_list_add(new_word, last_word, value);
            
            ds_list_add(dictionary, new_word); 
            ds_list_mark_as_list(dictionary, ds_list_size(dictionary)-1); 
            
            //rtdbg("Added new word: ", _word_str(new_word));
        }
        else if(last_type == 2) {
            var new_word = ds_list_create(); 
            ds_list_copy(new_word, last_word);
            ds_list_add(new_word, value); 
            
            ds_list_add(dictionary, new_word); 
            ds_list_mark_as_list(dictionary, ds_list_size(dictionary)-1); 
            
            //rtdbg("Added new word: ", _word_str(new_word));
        }
           
        // Save last word
        last_word = value; 
        last_type = 1; // Single value
    }
    else {
        // Fetch from dictionary 
        word = dictionary[|value - 256];
        
        // Output whole word
        var txt = "";
        for(var i = 0; i &lt; ds_list_size(word); i++) {
            buffer_write(buff_out, buffer_u8, word[|i]);
            txt += chr(word[|i]) + " ";
        }
        //rtdbg("Read word: ", txt);
            
        // Construct new word
        if(last_type == 1) {
            var new_word = ds_list_create(); 
            ds_list_add(new_word, last_word);
            ds_list_add(new_word, word[|0]); 
            
            ds_list_add(dictionary, new_word); 
            ds_list_mark_as_list(dictionary, ds_list_size(dictionary)-1); 
            
            //rtdbg("Added new word: ", _word_str(new_word));
        }
        else if(last_type == 2) {
            var new_word = ds_list_create(); 
            ds_list_copy(new_word, last_word);
            ds_list_add(new_word, word[|0]); 
            
            ds_list_add(dictionary, new_word); 
            ds_list_mark_as_list(dictionary, ds_list_size(dictionary)-1); 
            
            //rtdbg("Added new word: ", _word_str(new_word));
        }
            
        // Save last word
        last_word = word; 
        last_type = 2; // Whole word 
    }
}

buffer_shrink(buff_out); 

// Debug output 
var text = "";

buffer_seek(buff_out, buffer_seek_start, 0); 
while(buffer_tell(buff_out) &lt; buffer_get_size(buff_out)) {
    var value = buffer_read(buff_out, buffer_u8);
    text += chr(value) + " ";
}

var dict_text = "Dictionary:#";
for(var i = 0; i &lt; ds_list_size(dictionary); i++) {
    dict_text += "    " + _word_str(dictionary[|i]) + "#";
} 

rtdbg("Input size: ", buffer_get_size(buff_in), "#",
      "Output size: ", buffer_get_size(buff_out), "#",
      "Dictionary size: ", ds_list_size(dictionary), "#",
      "Compressed output: #", text, "#",
      dict_text);

game_end();</code>
  <enableViews>0</enableViews>
  <clearViewBackground>-1</clearViewBackground>
  <clearDisplayBuffer>-1</clearDisplayBuffer>
  <makerSettings>
    <isSet>0</isSet>
    <w>0</w>
    <h>0</h>
    <showGrid>0</showGrid>
    <showObjects>0</showObjects>
    <showTiles>0</showTiles>
    <showBackgrounds>0</showBackgrounds>
    <showForegrounds>0</showForegrounds>
    <showViews>0</showViews>
    <deleteUnderlyingObj>0</deleteUnderlyingObj>
    <deleteUnderlyingTiles>0</deleteUnderlyingTiles>
    <page>0</page>
    <xoffset>0</xoffset>
    <yoffset>0</yoffset>
  </makerSettings>
  <backgrounds>
    <background visible="0" foreground="0" name="" x="0" y="0" htiled="-1" vtiled="-1" hspeed="0" vspeed="0" stretch="0"/>
    <background visible="0" foreground="0" name="" x="0" y="0" htiled="-1" vtiled="-1" hspeed="0" vspeed="0" stretch="0"/>
    <background visible="0" foreground="0" name="" x="0" y="0" htiled="-1" vtiled="-1" hspeed="0" vspeed="0" stretch="0"/>
    <background visible="0" foreground="0" name="" x="0" y="0" htiled="-1" vtiled="-1" hspeed="0" vspeed="0" stretch="0"/>
    <background visible="0" foreground="0" name="" x="0" y="0" htiled="-1" vtiled="-1" hspeed="0" vspeed="0" stretch="0"/>
    <background visible="0" foreground="0" name="" x="0" y="0" htiled="-1" vtiled="-1" hspeed="0" vspeed="0" stretch="0"/>
    <background visible="0" foreground="0" name="" x="0" y="0" htiled="-1" vtiled="-1" hspeed="0" vspeed="0" stretch="0"/>
    <background visible="0" foreground="0" name="" x="0" y="0" htiled="-1" vtiled="-1" hspeed="0" vspeed="0" stretch="0"/>
  </backgrounds>
  <views>
    <view visible="0" objName="" xview="0" yview="0" wview="1024" hview="768" xport="0" yport="0" wport="1024" hport="768" hborder="32" vborder="32" hspeed="-1" vspeed="-1"/>
    <view visible="0" objName="" xview="0" yview="0" wview="1024" hview="768" xport="0" yport="0" wport="1024" hport="768" hborder="32" vborder="32" hspeed="-1" vspeed="-1"/>
    <view visible="0" objName="" xview="0" yview="0" wview="1024" hview="768" xport="0" yport="0" wport="1024" hport="768" hborder="32" vborder="32" hspeed="-1" vspeed="-1"/>
    <view visible="0" objName="" xview="0" yview="0" wview="1024" hview="768" xport="0" yport="0" wport="1024" hport="768" hborder="32" vborder="32" hspeed="-1" vspeed="-1"/>
    <view visible="0" objName="" xview="0" yview="0" wview="1024" hview="768" xport="0" yport="0" wport="1024" hport="768" hborder="32" vborder="32" hspeed="-1" vspeed="-1"/>
    <view visible="0" objName="" xview="0" yview="0" wview="1024" hview="768" xport="0" yport="0" wport="1024" hport="768" hborder="32" vborder="32" hspeed="-1" vspeed="-1"/>
    <view visible="0" objName="" xview="0" yview="0" wview="1024" hview="768" xport="0" yport="0" wport="1024" hport="768" hborder="32" vborder="32" hspeed="-1" vspeed="-1"/>
    <view visible="0" objName="" xview="0" yview="0" wview="1024" hview="768" xport="0" yport="0" wport="1024" hport="768" hborder="32" vborder="32" hspeed="-1" vspeed="-1"/>
  </views>
  <instances/>
  <tiles/>
  <PhysicsWorld>0</PhysicsWorld>
  <PhysicsWorldTop>0</PhysicsWorldTop>
  <PhysicsWorldLeft>0</PhysicsWorldLeft>
  <PhysicsWorldRight>1024</PhysicsWorldRight>
  <PhysicsWorldBottom>768</PhysicsWorldBottom>
  <PhysicsWorldGravityX>0</PhysicsWorldGravityX>
  <PhysicsWorldGravityY>10</PhysicsWorldGravityY>
  <PhysicsWorldPixToMeters>0.100000001490116</PhysicsWorldPixToMeters>
</room>
